---

    - include_vars: blades.yml

    - name: Show variables from include
      with_subelements:
         - "{{ clusters }}"
         - blades
      debug: msg=" {{ bladenames[item.1] }}   -  10.220.{{ nfs_octet }}.{{ bladeipsupper[item.1] }}"

    - name: Create Datacenter
      vmware_datacenter:
            datacenter_name: "{{ dc_name }}"
            hostname: "{{ vc_name }}"
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    - name: Create VMwareCluster
      with_items:
        - "{{ clusters }}"
      vmware_cluster:
            cluster_name: "{{ item.name }}"
            datacenter_name: "{{ dc_name }}"
            hostname: "{{ vc_name }}"
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            enable_drs: True
            enable_ha: True
            enable_vsan: False
            state: present

    - name: Add ESXi Host to VC
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_host:
            #esxi_hostname: "vdc-lablon{{ lab_number }}-{{ bladenames[item.1] }}.lablon{{ lab_number }}.cp.vdc"
            esxi_hostname: "{{ bladenames[item.1] }}"
            esxi_username: "{{ esxi_username }}"
            esxi_password: "{{ esxi_password }}"
            cluster_name: "{{ item.0.name }}"
            datacenter_name: "{{ dc_name }}"
            hostname: "{{ vc_name }}"
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    - name: Create distributed vSwitches
      when: switch_type == "dvs"
      with_dict: "{{ vmware_dvs }}"
      vmware_dvswitch:
            switch_name: "{{ item.value.name }}"
            discovery_proto: "{{ item.value.discovery_protocol }}"
            discovery_operation: "{{ item.value.discovery_operation }}"
            uplink_quantity: "{{ item.value.uplink_quantity }}"
            mtu: "{{ item.value.mtu }}"
            datacenter_name: "{{ dc_name }}"
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    # hardcoded swtichnames. Didn't find a way to loop over the switches too
    - name: Add hosts to the storage dvs
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_dvs_host:
            esxi_hostname: "{{ bladenames[item.1] }}"
            switch_name: "storage"
            vmnics:
                - vmnic4
                - vmnic5
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    # hardcoded swtichnames. Didn't find a way to loop over the switches too
    - name: Add hosts to the external dvs
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_dvs_host:
            esxi_hostname: "{{ bladenames[item.1] }}"
            switch_name: "external"
            vmnics:
                - vmnic1
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    - name: Create dvs port_groups
      when: switch_type == "dvs"
      with_subelements:
        - "{{ vmware_dvs }}"
        - portgroups
      vmware_dvs_portgroup:
            switch_name: "{{ item.0.name }}"
            portgroup_name: "{{ item.1.name }}"
            portgroup_type: "{{ item.1.portgroup_type }}"
            num_ports: "{{ item.1.numPorts }}"
            vlan_id: "{{ item.1.vlan }}"
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present

    # Try to configure iSCSI portgroups with a single uplink
    - name: Configure only one uplink to dvs portgroup iSCSI1
      when: switch_type == "dvs"
      vcenter_pg_activeuplinks:
            vds_name: "storage"            
            pg_name: "VMk-iSCSI-1"
            uplink_state: "active"
            uplinks:
                - 'uplink1'
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present
            
    - name: Configure only one uplink to dvs portgroup iSCSI2
      when: switch_type == "dvs"
      vcenter_pg_activeuplinks:
            vds_name: "storage"
            pg_name: "VMk-iSCSI-2"
            uplink_state: "active"
            uplinks:
                - 'uplink2'
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present
            
    - name: Migrate management to external portgroup
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_migrate_vmk:
            esxi_hostname: "{{ bladenames[item.1] }}"
            current_portgroup_name: "Management Network"
            current_switch_name: "vSwitch0"
            migrate_portgroup_name: "Management Network"
            migrate_switch_name: "external"
            device: "vmk0"
            hostname: "{{ vc_name }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_password }}"
            validate_certs: False
      # We ignore the errors not to fail the second time around
      ignore_errors: True
      tags:
        - initial_dvs_setup

    - name: Create vmkernel ports NFS
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vcenter_addvmk:
            mtu: "9000"
            dhcp: "False"
            ip_address: "10.220.{{nfs_octet}}.{{ bladeipsupper[item.1] }}"
            subnet_mask: "255.255.255.128"
            hostname: "{{ vc_name }}"
            esxi_hostname: "{{ bladenames[item.1] }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_password }}"
            validate_certs: False
            portgroup_name: "VMk-NFS"
            state: present

    - name: Create vmkernel ports vMotion
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vcenter_addvmk:
            mtu: "9000"
            dhcp: "False"
            ip_address: "192.168.{{nfs_octet}}.{{ bladeips[item.1] }}"
            subnet_mask: "255.255.255.0"
            hostname: "{{ vc_name }}"
            esxi_hostname: "{{ bladenames[item.1] }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_password }}"
            validate_certs: False
            portgroup_name: "VMk-vMotion"
            service_type: 'vmotion'
            state: present

    - name: Create vmkernel ports iSCSI1
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vcenter_addvmk:
            mtu: "9000"
            dhcp: "False"
            ip_address: "10.220.{{iscsi_octet}}.{{ bladeips[item.1] }}"
            subnet_mask: "255.255.255.0"
            hostname: "{{ vc_name }}"
            esxi_hostname: "{{ bladenames[item.1] }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_password }}"
            validate_certs: False
            portgroup_name: "VMk-iSCSI-1"
            state: present

    - name: Create vmkernel ports iSCSI2
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vcenter_addvmk:
            mtu: "9000"
            dhcp: "False"
            ip_address: "10.220.{{iscsi_octet}}.{{ bladeipsupper[item.1] }}"
            subnet_mask: "255.255.255.0"
            hostname: "{{ vc_name }}"
            esxi_hostname: "{{ bladenames[item.1] }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_password }}"
            validate_certs: False
            portgroup_name: "VMk-iSCSI-2"
            state: present

    # Delete vSwitch0
    - name: Delete vSwitch0 to free up vmnic0
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_vswitch:
            hostname: "{{ bladenames[item.1] }}"
            nic_name: "vmnic0"
            switch_name: "vSwitch0"
            username: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            validate_certs: False
            state: absent
      # We ignore the errors not to fail the second time around
      ignore_errors: True
      tags:
        - initial_dvs_setup

    # Add vmnic0 to external vswitch
    - name: Add hosts to the external dvs
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_dvs_host:
            esxi_hostname: "{{ bladenames[item.1] }}"
            switch_name: "external"
            vmnics:
                - vmnic0
                - vmnic1
            hostname: "{{ vc_name }}" 
            username: "{{ vcenter_user }}" 
            password: "{{ vcenter_password }}"
            validate_certs: False
            state: present
      # We ignore the errors not to fail the second time around
      ignore_errors: True
      tags:
        - initial_dvs_setup

    # Recreate vSwitch0
    - name: Recreate vSwitch0 because of cloudstack reasons with vmnic2
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_vswitch:
            hostname: "{{ bladenames[item.1] }}"
            nic_name: "vmnic2"
            switch_name: "vSwitch0"
            username: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            validate_certs: False
            state: present
      # We ignore the errors not to fail the second time around
      ignore_errors: True
      tags:
        - initial_dvs_setup

    - name: Create a portgroup "VM Network"
      when: switch_type == "dvs"
      with_subelements:
        - "{{ clusters }}"
        - blades
      vmware_portgroup:
            hostname: "{{ bladenames[item.1] }}"
            porgroup_name: "vmnic2"
            #vlan_id: "{{lab_number| integer*100}"
            switch_name: "vSwitch0"
            username: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            validate_certs: False
            state: present
      # We ignore the errors not to fail the second time around
      ignore_errors: True 
      tags:
        - initial_dvs_setup
